{% set name = "jq" %}
{% set version = "0.1.6" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "34bdf9f9e49e522e1790afc03f3584c6b57329215ea0567fb2157867d6d6f602" %}

package:
  name: '{{ name|lower }}.py'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
    - jq
  run:
    - python
    - jq

test:
  import:
    - jq

about:
  home: http://github.com/mwilliamson/jq.py
  license: BSD License
  license_family: BSD
  license_file: ''
  summary: jq is a lightweight and flexible JSON processor.
  description: "jq.py: a lightweight and flexible JSON processor\n================================================\n\nThis project contains Python bindings for\n`jq <http://stedolan.github.io/jq/>`_.\n\n\
    Installation\n------------\n\nDuring installation,\nthe source for jq 1.5 is downloaded over HTTPS and built.\nTherefore, installation requires any programs required to build jq.\nThis includes:\n\n\
    * Autoreconf\n\n* The normal C compiler toolchain, such as gcc and make.\n\n* libtool\n\n* Python headers.\n\nDebian, Ubuntu or relatives\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf on Debian, Ubuntu or relatives,\
    \ running the following command should be sufficient:\n\n.. code-block:: sh\n\n    apt-get install autoconf automake build-essential libtool python-dev\n\nRed Hat, Fedora, CentOS or relatives\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nIf on Red Hat, Fedora, CentOS, or relatives, running the following command should be sufficient:\n\n.. code-block:: sh\n\n    yum groupinstall \"Development Tools\"\n    yum install autoconf automake\
    \ libtool python\n\nMac OS X\n~~~~~~~~\n\nIf on Mac OS X, you probably want to install\n`Xcode <https://developer.apple.com/xcode/>`_ and `Homebrew <http://brew.sh/>`_.\nOnce Homebrew is installed,\
    \ you can install the remaining dependencies with:\n\n.. code-block:: sh\n\n    brew install autoconf automake libtool\n\nUsage\n-----\n\nA program can be compiled by passing it to ``jq.jq``.\nTo apply\
    \ the program to an input, call the ``transform`` method.\njq.py expects the value to be valid JSON,\nsuch as values returned from ``json.load``.\n\n.. code-block:: python\n\n    from jq import jq\n\
    \n    jq(\".\").transform(\"42\") == \"42\"\n    jq(\".\").transform({\"a\": 1}) == {\"a\": 1}\n\nIf the value is unparsed JSON text, pass it in using the ``text``\nargument:\n\n.. code-block:: python\n\
    \n    jq(\".\").transform(text=\"42\") == 42\n\nThe ``text_output`` argument can be used to serialise the output into\nJSON text:\n\n.. code-block:: python\n\n    jq(\".\").transform(\"42\", text_output=True)\
    \ == '\"42\"'\n\nIf there are multiple output elements, each element is represented by a\nseparate line, irrespective of the value of ``multiple_output``:\n\n.. code-block:: python\n\n    jq(\".[]\"\
    ).transform([1, 2, 3], text_output=True) == \"1\\n2\\n3\"\n\nIf ``multiple_output`` is ``False`` (the default), then the first output\nis used:\n\n.. code-block:: python\n\n    jq(\".[]+1\").transform([1,\
    \ 2, 3]) == 2\n\nIf ``multiple_output`` is ``True``, all output elements are returned in\nan array:\n\n.. code-block:: python\n\n    jq(\".[]+1\").transform([1, 2, 3], multiple_output=True) == [2, 3,\
    \ 4]"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: 'gwerbin'
